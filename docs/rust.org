* =run-command= recipe for RUST
:PROPERTIES:
:CUSTOM_ID: run-command-recipe-for-rust
:END:
** Table of Contents     :TOC:
- [[#run-command-recipe-for-rust][=run-command= recipe for RUST]]
  - [[#commands][Commands]]
  - [[#customization][Customization]]
    - [[#detect-rust-file][Detect Rust File]]
    - [[#detect-cargo-project][Detect Cargo Project]]
    - [[#compile-command][Compile Command]]

** Commands
:PROPERTIES:
:CUSTOM_ID: commands
:END:
This recipes has 9 commands:

- Install Dependecies of Cargo Project
- Run Cargo Project
- Build Cargo Project
- Build Documentation for Cargo Project
- Run Tests for Cargo Project
- Update Dependecies for Cargo Project
- Publish Cargo Project to https://crates.io
- Compile Rust File with =rustc=
- Run Rust File with =rustc=

** Customization
:PROPERTIES:
:CUSTOM_ID: customization
:END:
*** Detect Rust File
:PROPERTIES:
:CUSTOM_ID: detect-rust-file
:END:

For detect rust file, =run-command-recipes= has variable
=run-command-recipes-rust-modes=, which contains modes on which
this recipes will work, defaults to:

- =rust-mode=
- =rustic-mode=

Also this recipe has function =run-command-recipes-rust-mode-p=. This is function, which return t, when current file is rust file (and it don't take arguments!).

*** Detect Cargo Project
:PROPERTIES:
:CUSTOM_ID: detect-cargo-project
:END:
Variable =run-command-recipes-rust-cargo-filename= is file's name of file, which if put in root directory, then say that current directional is cargo directory

Function =run-command-recipes-rust-cargo-project-p= don't take arguments and return t, when now file is part of =cargo= project

*** Compile Command
:PROPERTIES:
:CUSTOM_ID: compile-command
:END:
=rust-command-recipes-rust-rustc-compile-command= is string, which is a shell command that compiles current Rust file using =rustc=. Defaults to:

#+begin_example
rustc {file-name}
#+end_example

=rust-command-recipes-rust-rustc-run-command= is a string which is a shell command that run the current Rust file using =rustc=.  Defaults to:

#+begin_example
rustc {file-name} && {file-name-no-ext}
#+end_example

